USE [Kabel]
GO

/****** Object:  StoredProcedure [dbo].[CST_GRAVAR_QTDE_APONTADA]    Script Date: 07/07/2023 17:20:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[CST_GRAVAR_QTDE_APONTADA]( @ITEM VARCHAR(50), @ODF VARCHAR(50) )        
AS        
DECLARE @APONTADO DECIMAL(19,6)        
DECLARE @RECNOANALISE INTEGER        
DECLARE @NECES DECIMAL(19,6)        
  
 UPDATE CST_APONTA_MP_ITEM_ODF SET APONTADO_OCTOPUS = ISNULL(QTDE_APONTADA,0), NATUAL = ANALISE.NATUAL   FROM CST_APONTA_MP_ITEM_ODF        
  left JOIN ( SELECT SUM(AL.QTDE_APONTADA) AS QTDE_APONTADA, sum(NECES) as NATUAL, AL.ITEM, AL.ODF FROM ANALISE AL (NOLOCK) 
  where AL.ITEM = @ITEM AND AL.ODF = @ODF GROUP BY AL.ITEM, AL.ODF )  ANALISE ON ANALISE.ODF = CST_APONTA_MP_ITEM_ODF.ODF
   AND CST_APONTA_MP_ITEM_ODF.ITEM = ANALISE.ITEM        
 WHERE ANALISE.ITEM = @ITEM AND ANALISE.ODF = @ODF        
  AND CST_APONTA_MP_ITEM_ODF.BAIXAR_ANALISE = 'Sim'  
  
DECLARE ANAL CURSOR LOCAL FORWARD_ONLY FOR         
(        
  SELECT ISNULL(SUM(QTDE),0) Q, ITEM, ODF FROM ANALISE_LOCAL WHERE LOCAL = '4754' AND ODF = @ODF AND ITEM = @ITEM GROUP BY ITEM, ODF        
) OPEN ANAL FETCH NEXT FROM ANAL INTO @APONTADO, @ITEM, @ODF         
WHILE @@fetch_status = 0        
begin        
   DECLARE ANALISE CURSOR LOCAL FORWARD_ONLY FOR         
  (        
    SELECT NECES,  R_E_C_N_O_ FROM ANALISE WHERE  ITEM = @ITEM AND ODF = @ODF        
  ) OPEN ANALISE FETCH NEXT FROM ANALISE INTO @NECES, @RECNOANALISE        
  WHILE @@fetch_status = 0        
  begin        
   IF @APONTADO > @NECES        
   begin        
    update ANALISE SET QTDE_APONTADA = @NECES WHERE R_E_C_N_O_ = @RECNOANALISE        
    SET @APONTADO = ( @APONTADO - @NECES )        
   end        
   ELSE IF @APONTADO < @NECES        
   begin        
      update ANALISE SET QTDE_APONTADA = @APONTADO WHERE R_E_C_N_O_ = @RECNOANALISE        
      SET @APONTADO = 0        
   end         
   ELSE IF @APONTADO = @NECES        
   begin        
      update ANALISE SET QTDE_APONTADA = @APONTADO WHERE R_E_C_N_O_ = @RECNOANALISE        
      SET @APONTADO = 0        
   end         
   FETCH NEXT FROM ANALISE INTO @NECES, @RECNOANALISE        
  END        
 deallocate ANALISE     
     
     
UPDATE ANALISE SET QTDE_APONTADA = '0', CST_QTDE_APONTADA = 0  FROM ANALISE (NOLOCK)       
 LEFT JOIN (      
  select SUM(QTDE) AS Q, ITEM, ODF from ANALISE_LOCAL WHERE LOCAL = '4754'      
  GROUP BY ITEM, ODF      
 ) AS TBL ON TBL.ITEM = ANALISE.ITEM AND ANALISE.ODF = TBL.ODF      
WHERE TBL.ITEM IS NULL      
 AND ANALISE.ODF = @ODF      
 AND ANALISE.ITEM = @ITEM      
 AND QTDE_APONTADA IS NOT NULL      
 AND QTDE_APONTADA > 0      
    
UPDATE ANALISE SET QTDE_APONTADA = TBL.Q, CST_QTDE_APONTADA = TBL.Q   FROM ANALISE (NOLOCK)       
 LEFT JOIN (      
  select SUM(QTDE) AS Q, ITEM, ODF from ANALISE_LOCAL WHERE LOCAL = '4754'      
  GROUP BY ITEM, ODF      
 ) AS TBL ON TBL.ITEM = ANALISE.ITEM AND ANALISE.ODF = TBL.ODF      
WHERE TBL.ITEM IS NULL      
 AND isnull(QTDE_APONTADA,0) > 0      
    
 UPDATE CST_APONTA_MP_ITEM_ODF SET APONTADO_OCTOPUS = ISNULL(QTDE_APONTADA,0), NATUAL = NATUALS  FROM CST_APONTA_MP_ITEM_ODF        
  left JOIN ( SELECT SUM(AL.QTDE_APONTADA) AS QTDE_APONTADA, sum(NECES) as NATUALS, AL.ITEM, AL.ODF FROM ANALISE AL (NOLOCK) where AL.ITEM = @ITEM AND AL.ODF = @ODF GROUP BY AL.ITEM, AL.ODF )  
  ANALISE ON ANALISE.ODF = CST_APONTA_MP_ITEM_ODF.ODF AND CST_APONTA_MP_ITEM_ODF.ITEM = ANALISE.ITEM        
 WHERE ANALISE.ITEM = @ITEM AND ANALISE.ODF = @ODF        
  AND CST_APONTA_MP_ITEM_ODF.BAIXAR_ANALISE = 'Sim'        
    
end        
deallocate ANAL
GO


